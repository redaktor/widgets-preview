.root {
	width: 100%;
	/* padding-top: var(--line2); */
	margin-bottom: calc(var(--line) * var(--mml,0));
	background-color: var(--ui-bg, #000);
	order: 7;
}
.loaded { }
/*
.root.loaded {
	padding-top: 0px;
}
*/
.hasPagination {
	display: flex;
	flex-wrap: wrap;
	align-items: center;
	justify-content: space-around;
	padding-bottom: var(--line);
}
.break {
	order: 4;
}
.page {
	--minWidth: 240px;
	--gap: 4px;
	width: 100%;
	position: relative;
	order: 5;
}
.firstControl { }
.lastControl { }
.prevControl,
.nextControl {
	display: none;
	color: var(--text);
	transition: var(--ui-dpd-0,80ms) color var(--ui-easing);
}
.prevControl {
	order: 1;
}
.nextControl {
	order: 3;
}
.pageRadio:checked + .prevControl,
.pageRadio:checked + .prevControl + .nextControl,
.pageRadio {
	display: flex;
}

.root:not(.row) .page {
	display: grid;
	grid-gap: var(--gap, var(--grid-base, 8px));
	grid-template-columns: repeat(auto-fill, minmax(calc((var(--minWidth) / 2) - var(--gap)), 1fr));
	grid-auto-rows: minmax(var(--line, 16px), 100%);
}
.row .page {
	display: flex;
	align-items: baseline;
}
.row .page > * {
	max-width: calc(100% / var(--count)) !important;
	max-height: calc(var(--minWidth) / 9 * 16);
}
.root .pageRadio:not(:checked) + .prevControl + .nextControl + .page {
	display: none;
}
.pageRadio.hidden {
	visibility: hidden;
	position: absolute;
	top: -4000px;
	height: 0px;
}
.pageRadio:not(.hidden) {
	display: flex;
	order: 2;
	-webkit-appearance: none;
	-moz-appearance: none;
	appearance: none;
	border-radius: 50%;
	width: var(--line);
	height: var(--line);
	border: var(--ui-border-width-emphasized) solid var(--text-muted, #999);
	transition: var(--ui-dpd-0,80ms) all var(--ui-easing);
	margin: 0;
	padding: 0;
	z-index: 2;
	cursor: pointer;
}
.pageRadio:not(.hidden)::after {
	color: var(--text-muted);
	display: flex;
	width: 100%;
	align-items: center;
	justify-content: center;
	text-align: center;
	position: relative;
	top: -1px;
}
.pageRadio:checked:not(.hidden)::after {
	content: attr(data-i);
}
.pageRadio:checked {
	border-color: var(--ui-border, #999);
}
.pageRadio:checked::after {
	color: var(--text);
}
.pageInfo {
	margin: 0;
	padding: 0;
	order: 2;
}



label.prevControl, label.nextControl {
	align-items: center;
	justify-content: center;
	min-width: var(--touch-target-min, 40px);
	min-height: var(--line2);
	padding: 0;
	margin: 0;
	cursor: pointer;
}

/* The weird CSS rule for only hover devices */
@media not all and (hover: none) {
	.pageRadio:not(:checked):not(.hidden) {
		border-color: var(--border, #999);
	}
	.pageRadio:not(:checked):not(.hidden):hover {
		border-color: var(--text-muted, #999);
	}
	.prevControl,
	.nextControl {
		color: var(--text-muted);
	}
	.root .pageRadio:checked + .prevControl:hover,
	.root .pageRadio:checked + .prevControl + .nextControl:hover {
		color: var(--text);
	}
}

/* native masonry */
@supports (grid-template-rows: masonry) {
	.micro .page { --mcols: 1; --gap: 0; }
	.xs .page { --mcols: 2; --gap: 0; }
	.s .page { --mcols: 2; }
	.m .page { --mcols: 3; }
	.l .page { --mcols: 4; }
	.xl .page { --mcols: 5; }
	.xxl .page { --mcols: 6; --gap: calc(var(--grid-base, 8px) * 2); }
  .page {
	  grid-template-columns: repeat(var(--mcols, 2), 1fr);
	  grid-template-rows: masonry;
	}
	.page figure img {
	  grid-row: 1 / -1;
	  grid-column: 1;
	}
}
