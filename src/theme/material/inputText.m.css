/* The root class of TextInput */
.root {
	composes: uiVar ui-transition from './_ui.m.css';
	--label-fill: var(--ui-text);
	--border-fill: var(--ui-accent);
	--input-color: var(--text);
	--input-radius: var(--ui-border-radius-emphasized,2px) var(--ui-border-radius-emphasized,2px) 0 0;
	--p: calc(var(--mb, 16px) / 2);
	color: var(--input-color,inherit);
	display: inline-block;
	position: relative;
	outline: none;
	width: 100%;
	min-width: 0;
	margin: 0 !important;
	padding: 0 !important;
}
.xs.root, .s.root {
	margin: calc(var(--line, 16px) * -1) 0 0 0 !important;
}
.root.responsive {
	max-width: 100%;
}
.root:not(.responsive) {
	max-width: 320px;
}
/* The wrapper around the text input, label, leading, and trailing (not helper text) */
.wrapper {
	display: flex;
	position: relative;
	width: 100%;
	overflow: hidden;
}

.inputWrapper {
	width: auto;
	position: relative;
	flex-grow: 1;
}
/* Added to the input */
.input,
.autofill {
	width: 100%;
	min-width: 64px;
	border: none;
	padding-top: calc(var(--line, 16px) + var(--pt, 8px));
	padding-left: var(--p, 8px);
	padding-right: var(--plr, 4px);
	padding-bottom: var(--p, 8px);
	margin-bottom: var(--p, 8px);
  transition: width 0.25s;
}
.input {
	z-index: 1;
}
.outlined .input,
.outlined .autofill {
	padding-left: calc(var(--p, 8px) + var(--ui-border-width-emphasized, 2px));
	padding-right: calc(var(--plr, 4px) + var(--ui-border-width-emphasized, 2px));
}
.input:focus {
  outline: none;
}
.root .input,
.root .autofill {
	caret-color: var(--border-fill, var(--m-500));
	color: var(--input-color, var(--text, inherit));
	background: none;
}
.autofill {
	position: absolute;
	pointer-events: none;
	z-index: 0;
	opacity: 0.72;
	bottom: 0;
}
.animated { }
/* Added at the root when there is leading content */
.hasLeading {
}
/* Added at the root when there is trailing content */
.hasTrailing {
}
/* Contains leading content */
.addonRoot {
	margin-top: calc(var(--line, 16px) + var(--pt, 8px));
	margin-bottom: var(--p, 8px);
}
.addonFilled {
	/* TODO variants */
	background: var(ui-filled);
}
.addonSpaced {
	padding-left: var(--mb, 16px);
	padding-right: var(--p, 8px);
}
/* Helper byline */
.helperText {
}


.box,
.label {
	position: absolute;
	pointer-events: none;
}
.box {
	bottom: var(--p, 8px);
	width: 100%;
	height: calc(var(--h) + var(--mb));
	margin-bottom: 0;
	background-color: var(--ui-bg);
	border-radius: var(--input-radius);
	border-bottom: var(--ui-border-width-emphasized, 2px) solid var(--ui-bg-inverse-muted);
	box-shadow: var(--ui-dp-2);
	transition: border-color var(--ui-dpd-8) var(--ui-easing);
	z-index: -1;
}
.xxl, .xl, .l {

}
.m .box {
	bottom: calc(var(--p, 8px) + var(--ui-border-width-emphasized, 2px));
}
.s .box,
.xs .box {
	bottom: calc(var(--p, 8px) + var(--pt, 4px));
}
.flat .box {
	box-shadow: none;
	background-color: transparent;
}
.raised .box {
	box-shadow: var(--ui-dp-4);
	border-top: 1px solid var(--highlight);
}
.outlined .box {
	height: calc(var(--h) + var(--mb) + var(--ui-border-width-emphasized));
	border: var(--ui-border-width-emphasized) solid var(--ui-bg-inverse-muted);
}
.outlined .input:not(.input:placeholder-shown) ~ .box {
	border: var(--ui-border-width-emphasized) solid var(--ui-border, var(--m-600));
}
.shaped .box {
	background-color: var(--ui-filled);
}
/* The bottom line, animated as pseudoelement ::after */
.box::after {
	content: '';
	position: absolute;
	width: 100%;
	height: var(--ui-border-width-emphasized);
	bottom: calc(var(--ui-border-width-emphasized) * -1);
	background: var(--border-fill, var(--m-500));
	transform-origin: center top;
	transform: scaleX(0);
  pointer-events: none;
	transition: transform var(--ui-dpd-6) var(--ui-easing) 0ms;
}
.flat .box::after {
	box-shadow: var(--ui-dp-2);
}
.wrapper:focus-within .box::after {
	transform: scaleX(1);
}
.invalid .box::after {
	height: var(--size);
	bottom: calc(var(--size) * -1);
}
@keyframes isvalid {
    0%   { background-color: var(--ui-success, lime); }
    80%  { background-color: var(--ui-success, lime); }
    100% { background-color: var(--border-fill, var(--m-500)); }
}
.valid:focus-within .box::after {
	background-color: var(--ui-success, lime);
	border-color: var(--ui-success, lime);
	/* animation: isvalid var(--ui-dpd-24,400ms) forwards; */
}

.invalid .input ~ .box,
.input:invalid ~ .box,
.invalid .box::after,
.root:not(.disabled) .input:invalid + .box::after {
	transform: scaleX(1);
	background-color: var(--ui-error, red) !important;
	border-color: var(--ui-error, red) !important;
}

.label {
	font-weight: var(--weight-semibold);
	left: var(--p, 8px);
	bottom: 0px;
	transition-property: transform, color, background-color;
	transition-duration: var(--ui-dpd-0);
	transition-timing-function: var(--ui-easing);
	transform-origin: left top;
	transform: translateY(calc(var(--line,16px) * -0.8)) scale(0.8);
	cursor: text;
	text-overflow: ellipsis;
	white-space: nowrap;
	max-width: 100%;
	overflow: hidden;
	color: var(--label-fill, var(--gray, #666));
	background-color: transparent;
}
.outlined .label {
	left: calc(var(--p, 8px) + var(--ui-border-width-emphasized, 2px));
}
.m .label {
	transform: translateY(calc(var(--line,16px) * -0.84)) scale(0.84);
}
.s .label {
	transform: translateY(calc(var(--line,16px) * -0.96)) scale(0.96);
}
.xs .label {
	transform: translateY(calc(var(--line,16px) * -0.8));
}
.input:not(.input:focus):placeholder-shown ~ .label {
	--label-fill: var(--text-muted);
}
.slideLabel .input:not(.input:focus):placeholder-shown ~ .label {
	transform: translateY(0) scale(1);
}
.staticLabel { }

/* Added to a focused content */
.focusedContent {
	position: relative;
	z-index: 11;
	display: none;
}
.input:focus ~ .focusedContent {
	display: flex;
}

.slideLabel .input::placeholder {
	color: var(--text-muted, var(--gray, #666));
	font-size: var(--size, 16px);
	padding-top: var(--pt);
	line-height: inherit;
}
.slideLabel .input::placeholder,
.slideLabel .prefix,
.slideLabel .suffix {
	transition: opacity var(--ui-dpd-1) var(--ui-easing);
	opacity: 0;
}
.slideLabel .input:focus ~ .prefix,
.slideLabel .input:focus ~ .suffix,
.slideLabel .input:not(:placeholder-shown) ~ .prefix,
.slideLabel .input:not(:placeholder-shown) ~ .suffix {
	opacity: 1;
}
.slideLabel .input:focus::placeholder {
	opacity: 0.8;
}

.invalid .input:focus ~ label,
.wrapper .input:invalid:focus ~ .label {
	color: var(--ui-error);
}

.disabled .input:not(:invalid) ~ .box {
	background-color: var(--ui-disabled) !important;
}
.disabled label {
	color: var(--ui-disabled) !important;
}
.required label::after {
	content: "*";
}
.required label::after,
.root div[pseudo="-webkit-textfield-decoration-container"] {
	color: var(--ui-error, red);
	text-align: right;
}
.required .input:empty,
.invalid .input,
.enabled .input:invalid {
	caret-color: var(--ui-error, red);
}
.noLabel {
}

/* Added to a disabled TextInput */
.disabled {
}
/* Added to a focused input */
.focused {
}
/* Added to a read-only input */
.readonly {
}
/* Added to a required input */
.required {
}
/* Added when the contents of the TextInput are invalid */
.invalid {
}
/* Styles the helper text when the input is invalid */
.invalid .helperText {
	color: var(--ui-error, red);
}

/*
.flat .box,
.filled .box,
.raised .box {
	border-radius: 0;
	border-top: 0;
	border-left: 0;
	border-right: 0;
	border-bottom: var(--ui-border-width-emphasized) solid var(--ui-outline);
}
.raised .box,
.raised:hover .box {
	border-top: var(--ui-border-width-emphasized) solid var(--ui-bg-inverse-hover);
}
.raised .box,
.shaped .box {
	border-width: var(--ui-border-width);
	border-radius: var(--input-radius);
	background-color: var(--ui-bg-inverse);
}
.filled .box {
	border-radius: var(--input-radius);
	background-color: var(--ui-filled);
}
.outlined .box {
	border: var(--ui-border-width-emphasized) solid var(--ui-outline);
	background-color: var(--paper);
}

.root:not(.disabled):not(.invalid) .input:hover:not(:focus):not(:invalid) ~ .box {
	border-color: var(--ui-border-hover);
}
.root:not(.disabled):not(.invalid).filled .input:hover:not(:focus):not(:invalid) ~ .box {
	border-color: var(--ui-border);
}
.root:not(.disabled):not(.invalid).raised .input:hover:not(:focus):not(:invalid) ~ .box {
	border-color: var(--ui-bg-inverse);
}
.raised:not(.disabled):not(.invalid) .input:focus:not(:invalid) ~ .box,
.filled:not(.disabled):not(.invalid) .input:focus:not(:invalid) ~ .box,
.shaped:not(.disabled):not(.invalid) .input:focus:not(:invalid) ~ .box {
	background-color: var(--ui-bg-inverse-hover);
}

.box::after {
	transform: scaleX(0);
  pointer-events: none;
	border-color: var(--ui-accent);
	transition: transform var(--ui-dpd-6) var(--ui-easing) 0ms;
}

.root.flat .box::after,
.root.outlined .box::after {
	cursor: text;
	margin-top: var(--ui-border-width-emphasized);
}

.root:not(.disabled) .input:focus + .box::after {
	transform: scaleX(1);
}
*/

/*
.root:not(.flat) .label::after {
	content: "";
	display: inline-block;
	position: absolute;
	width: 100%;
	left: 0;
	background: var(--paper);
	z-index: -1;
}
.slideLabel:not(.flat) .label::after {
	will-change: transform;
	transform: scaleY(0);
}
.root:not(.flat):not(.outlined) .label::after {
	margin-top: calc((var(--small-size) - var(--size)) * 0.5);
	height: calc(var(--size) + var(--ui-border-width));
}
.outlined .label::after {
	margin-top: calc(var(--small-size) * 0.5 - 0.5px);
	height: calc(var(--ui-border-width-emphasized) + 0.5px);
}
.shaped .label::after {
	border-radius: 0 0 var(--ui-border-radius-emphasized) 0;
}
.slideLabel .input:focus ~ .label::after,
.slideLabel .input:not(:placeholder-shown) ~ .label::after {
	transform: scaleY(1);
	transition: transform 16ms linear calc(var(--ui-dpd-0) * 0.6);
}
*/

/*
.hasSchema .input:focus ~ .label {
	color: var(--ui-bg);
}
.parentSchema .input:focus ~ .label {
	color: var(--ui-accent);
}

.filled .box,
.outlined .box {
	content: "";
	display: block;
	position: absolute;
	bottom: 0;
	left: 0;
	width: 100%;
	z-index: -1;
}
.filled .box {
	height: calc(var(--ui-outer-h) - var(--input-border-distance) + var(--ui-lr));
	border-radius: var(--ui-border-radius-emphasized) var(--ui-border-radius-emphasized) 0 0;
	background: var(--input-fill);
}
.outlined .box {
	height: calc(var(--size) * var(--lh) - (var(--line) - var(--size)));
	border-radius: var(--ui-border-radius-emphasized);
	border: var(--ui-border-width) solid var(--ui-outline);
}
.outlined .input:focus ~ .box {
	border-width: var(--ui-border-width-emphasized);
}
.root:not(.responsive):not(.number)::after,
.root:not(.responsive):not(.number) .wrapper {
	width: var(--ui-default-input-width);
}
.outlined.invalid .box,
.outlined:not(.disabled) .input:invalid ~ .box {
	border-color: var(--ui-error);
}
*/
