.root { composes: root from './inputText.m.css'; }
.wrapper { composes: wrapper from './inputText.m.css'; }
.inner { composes: inner from './inputText.m.css'; }
.input { composes: input from './inputText.m.css'; }
.box { composes: box from './inputText.m.css'; }
.responsive { composes: responsive from './inputText.m.css'; }
.enabled { composes: enabled from './inputText.m.css'; }
.disabled { composes: disabled from './inputText.m.css'; }
.valid { composes: valid from './inputText.m.css'; }
.invalid { composes: invalid from './inputText.m.css'; }
.slideLabel { composes: slideLabel from './inputText.m.css'; }
.staticLabel { composes: staticLabel from './inputText.m.css'; }
.shaped { }
/* Added to a read-only input */
.readonly {
}
/* Added to a required input */
.required {
}
/* TODO nojs for expand ? */
.root,
.root:hover {
  background: none !important;
}
.root:not(.expand) .wrapper {
	overflow: auto;
	overflow-x: hidden;
}
.expand .wrapper {
  height: auto;
  padding-top: var(--pt);
  margin-bottom: calc(var(--mb) - var(--p));
}
.fixed .wrapper {
  height: auto;
  margin-bottom: var(--pt);
  padding-right: var(--ui-border-width-emphasized);
}
.root .input {
  box-sizing: border-box;
  padding-top: 0px;
  padding-bottom: 0px;
	width: 100%;
	height: 100%;
	z-index: 9;
  /* no resize transition */
  position: relative;
  transition: none;
  border: none;
}

.input::placeholder {
	font-size: var(--small-size);
	padding-top: var(--pt);
	line-height: 1;
}

.root.expand textarea.input {
  display: block;
  resize: both;
  overflow: hidden;
  min-height: var(--line2);
}
.outlined.staticLabel .wrapper > label,
.outlined.slideLabel .input:focus ~ label,
.outlined.slideLabel .input:not(:placeholder-shown) ~ label {
  top: calc(var(--pt) - (var(--mb) * var(--small-size)) - var(--line));
}
.root .box {
  background: none;
  bottom: 0px;
}
.root .box::before {
  display: none;
}

.bg {
  position: absolute;
  bottom: -1px;
  left: 0px;
  width: 100%;
  height: calc(100% + var(--line));
}
.filled .bg {
  border-radius: var(--ui-border-radius-emphasized) var(--ui-border-radius-emphasized) 0 0;
	background: var(--input-fill);
}
.outlined .bg {
	border-radius: var(--ui-border-radius-emphasized);
  border: var(--ui-border-width) solid var(--ui-outline);
}
.expand.outlined .input:focus ~ .bg {
	border: var(--ui-border-width-emphasized) dotted var(--ui-outline);
}
.outlined.focused .bg,
.outlined:focus-within .bg {
	border-width: var(--ui-border-width-emphasized);
}
.outlined.invalid .bg,
.outlined.enabled .input:invalid ~ .bg {
	border-color: var(--ui-error);
}

.root.expand:not(.outlined) .input:focus:not(:invalid) ~ .box::after {
  border-top: var(--ui-border-width-emphasized) dotted var(--root-bg);
}
